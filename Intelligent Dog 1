import numpy as np
import matplotlib.pyplot as plt

v_ratio = 5.3
radius = 1
r = radius
m_v = 1
d_v = v_ratio*m_v
d_omega = d_v/r

steps = 750

d_period = 2/v_ratio
d_omega = 2.*np.pi/d_period
d_t = np.linspace(0., d_period, int(steps/v_ratio))

dog_circ_x1 = -np.cos(d_omega*d_t)
dog_circ_x2 = np.cos(d_omega*d_t + np.pi/2.)
dog_circ_theta = np.arctan(dog_circ_x2/dog_circ_x1)
dog_theta_gap = dog_circ_theta[1] - dog_circ_theta[0]

for i in range(len(dog_circ_theta)):
    if dog_circ_x1[i]*dog_circ_x2[i]<0 or dog_circ_x1[i] <0 :
        dog_circ_theta[i]+=np.pi
    if dog_circ_x1[i]>0 and dog_circ_x2[i]<0:
        dog_circ_theta[i]+=np.pi

period = 2.
omega = 2.*np.pi/period
t = np.linspace(0., period, steps)
timestep = t[1]-t[0]


x1 = -np.cos(omega*t)
x2 = np.cos(omega*t + np.pi/2.)
circ_theta = np.arctan(x2/x1)
theta_gap = circ_theta[1] - circ_theta[0]

for i in range(len(circ_theta)):
    if x1[i]*x2[i]<0 or x1[i] <0 :
        circ_theta[i]+=np.pi
    if x1[i]>0 and x2[i]<0:
        circ_theta[i]+=np.pi

escaped = 0
dash = 0

m_v = 1
d_v = v_ratio*m_v

d_omega = d_v/r

d_x1 = -1
d_x2 = 0

m_x1=1/v_ratio
m_x2=0

delta_x = d_x1-m_x1
delta_y = d_x2-m_x2
theta = np.arctan(delta_y/delta_x)

m_dx1=m_v*v_ratio* timestep*np.cos(theta)
m_dx2=m_v*v_ratio* timestep*np.cos(theta)

m_x1_list=[m_x1]
m_x2_list=[m_x2]

d_x1_list = [d_x1]
d_x2_list = [d_x2]

i = 1


while escaped == 0 and i<200:
    
    #Determine the mans next pos by running 180 deg away from the dog
    delta_x = m_x1-d_x1_list[i-1]
    delta_y = m_x2-d_x2_list[i-1]
    theta = np.arctan(delta_y/delta_x)

    if delta_x*delta_y<0 or delta_x <0 :
        theta+=np.pi
    if delta_x>0 and delta_y<0:
        theta+=np.pi

    m_dx1=m_v*v_ratio* timestep*np.cos(theta)
    m_dx2=m_v*v_ratio* timestep*np.sin(theta)
    
    m_x1 += m_dx1
    m_x2 += m_dx2
    
    m_x1_list.append(m_x1)
    m_x2_list.append(m_x2)
    
    dog_theta = np.arctan(d_x2/d_x1)
    if d_x1*d_x2<0 or d_x1 <0 :
        dog_theta+=np.pi
    if d_x1>0 and d_x2<0:
        dog_theta+=np.pi
    
    for j in range(len(circ_theta)):
        if circ_theta[j]-theta_gap/2 <= theta<= circ_theta[j]+theta_gap/2:
            target_ind = j
            target_x1 = x1[j]
            target_x2 = x2[j]
            break
        
    for j in range(len(dog_circ_theta)):
        if dog_circ_theta[j]-dog_theta_gap/2 <= dog_theta<= dog_circ_theta[j]+theta_gap/2:
            dog_ind = j
            break
        
    if dog_ind*v_ratio <=target_ind:
        forward_dist = target_ind-v_ratio*dog_ind
        backward_dist = v_ratio*dog_ind + len(circ_theta) -target_ind
    else: 
        forward_dist = target_ind + len(circ_theta) - dog_ind*v_ratio
        backward_dist = v_ratio*dog_ind-target_ind
        
    if forward_dist <= backward_dist:
        d_x1 = dog_circ_x1[dog_ind+1]
        d_x2 = dog_circ_x2[dog_ind+1]
    else:
        if dog_ind ==0:
            d_x1 = dog_circ_x1[len(dog_circ_theta)-2]
            d_x2 = dog_circ_x2[len(dog_circ_theta)-2]
        else:
            d_x1 = dog_circ_x1[dog_ind-1]
            d_x2 = dog_circ_x2[dog_ind-1]
    
    d_x1_list.append(d_x1)
    d_x2_list.append(d_x2)
    
    
    # plt.plot(x1,x2)
    # plt.plot(m_x1_list,m_x2_list, label = "Man")
    # plt.plot(d_x1,d_x2, "kx", label = "Dog")
    # plt.ylim(-1, 1)
    # plt.xlim(-1,1)
    # ax = plt.gca()
    # ax.set_aspect('equal', adjustable='box')
    # plt.legend()
    # plt.draw()
    # plt.show()
    
    
    # m_stepsize = np.sqrt(m_dx1**2 + m_dx2**2)
    # m_dist = np.sqrt((m_x1-target_x1)**2 + (m_x2-target_x2)**2)
    # m_steps =np.ceil(m_dist/m_stepsize) 
    # d_steps = min(forward_dist-1, backward_dist-1)
    
    # print(m_steps, d_steps)
    
    # if m_steps<= d_steps:
    #     dash = 1
    #     print("Dash")

    i+=1     
    
    if m_x1**2 + m_x2**2 >= r**2:
        escaped = 1
        print("Sucessfully escaped")
        break

plt.plot(x1,x2) 
plt.plot(m_x1_list,m_x2_list, label = "Man")
# plt.plot(d_x1,d_x2, "kx", label = "Dog")
plt.plot(d_x1,d_x2, "kx", label = "Dog")
plt.ylim(-1, 1)
plt.xlim(-1,1)
ax = plt.gca()
ax.set_aspect('equal', adjustable='box')
plt.legend()
plt.draw()
plt.show() 
